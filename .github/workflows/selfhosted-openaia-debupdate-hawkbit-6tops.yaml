name: Build and Release OpenAIA Debupdate Hawkbit 6TOPS

on:
  push:
    branches:
      - master

jobs:
  build:
    permissions: write-all
    name: OpenAIA Debupdate Hawkbit 6TOPS runner
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Clone OpenAIA Debupdate
      run: |
        cd ${{ runner.workspace }}
        ls
        cd debupdate-actions
        ls


    - name: run hawkbit swupdate action
      run: |
        cd ${{ runner.workspace }}
        ls
        cd debupdate-actions
        ls
        echo "Step 1: Enable Target Token Authentication"
        curl -i -X PUT 'http://localhost:8080/rest/v1/system/configs/authentication.targettoken.enabled/' \
        -u 'admin:admin' \
        -H 'Content-Type: application/json' \
        -d '{"value": true}'
        echo "--------------------------------------------------"
        
        # Step 2: Device Pre-Provisioning
        echo "Step 2: Device Pre-Provisioning"
        response=$(curl -i -X POST 'http://localhost:8080/rest/v1/targets' -u 'admin:admin' -H 'Content-Type: application/json' -d '[{"controllerId": "neu6","name": "device_01","description": "My first device"}]')
        echo "--------------------------------------------------"
        
        # Extracting securityToken from the response using grep and awk
        securityToken=$(echo "$response" | grep -o '"securityToken":"[^"]*' | awk -F ':"' '{print $2}')
        
        # Step 3: Device Registration
        echo "Step 3: Device Registration"
        curl -i -X GET 'http://localhost:8080/DEFAULT/controller/v1/neu6' -H "Authorization: TargetToken $securityToken"
        echo "--------------------------------------------------"
        
        # Step 4: Set Device Attributes (DDI)
        echo "Step 4: Set Device Attributes (DDI)"
        curl -i -X PUT 'http://localhost:8080/DEFAULT/controller/v1/neu6/configData' -H 'Authorization: TargetToken $securityToken' -H 'Content-Type: application/json' -d '{"mode": "merge","data": {"VIN": "JH4TB2H26CC000001","hwRevision": "1"},"status": {"result": {"finished": "success"},"execution": "closed","details": []}}'
        echo "--------------------------------------------------"
        #=============================================================================================================================================================
        
        #Part 2: Creating an Update (Mgmt API)
        #======================================
        
        # Step 1: Create a Software Module
        echo "Step 5: Create a Software Module"
        curl -i -X POST 'http://localhost:8080/rest/v1/softwaremodules' -u 'admin:admin' -H 'Content-Type: application/json' -d '[{"vendor": "Example Ltd.","name": "MyOS","description": "First version of MyOS.","type": "os","version": "1.0"}]'
        echo "--------------------------------------------------"
        
        # Step 2: Upload an Artifact
        echo "Step 6: Upload an Artifact"
        # Make sure the software module ID addressed in the URL is correct (replace "1" if needed)
        # Create a file "artifact01.file" first in your current directory
        curl -i -X POST 'http://localhost:8080/rest/v1/softwaremodules/1/artifacts' -u 'admin:admin' -H 'Content-Type: multipart/form-data' -F 'file=@device_01.swu'
        echo "--------------------------------------------------"
        
        # Step 3: Create a Distribution Set
        echo "Step 7: Create a Distribution Set"
        curl -i -X POST 'http://localhost:8080/rest/v1/distributionsets' -u 'admin:admin' -H 'Content-Type: application/json' -d '[{"requiredMigrationStep": false,"name": "myDS","description": "MyOS initial update","type": "os","version": "1.0"}]'
        echo "--------------------------------------------------"
        
        # Step 4: Assign the Software Module to the Distribution Set
        echo "Step 8: Assign the Software Module to the Distribution Set"
        curl -i -X POST http://localhost:8080/rest/v1/distributionsets/1/assignedSM -u 'admin:admin' -H 'Content-Type: application/json' -d '[{"id": "1"}]'
        echo "--------------------------------------------------"
        
        #=============================================================================================================================================================
        
        #Part 3: Updating a Single Device (Mgmt API + DDI)
        #==================================================
        
        # Step 1: Assign a Distribution Set to a Device (Mgmt API)
        #echo "Step 9: Assign a Distribution Set to a Device (Mgmt API)"
        curl -i -X POST http://localhost:8080/rest/v1/distributionsets/1/assignedTargets/ -u 'admin:admin' -H 'Content-Type: application/json' -d '[{"id" : "neu6","type" : "forced"}]'
        
        #echo "--------------------------------------------------"
        
        # Step 2: Poll for Updates (DDI)
        rm response.txt
        
        curl -s -i -X GET http://localhost:8080/DEFAULT/controller/v1/neu6 -H 'Authorization: TargetToken $securityToken' > response.txt
        
        echo "############################################ reponse.txt ###########################################"
        cat response.txt
        
        # Extract href link for deploymentBase using awk
        href_link=$(grep -o '"deploymentBase":{"href":"[^"]*' response.txt | sed 's/"deploymentBase":{"href":"//')
        
        # Print the extracted link
        echo "DeploymentBase Href Link: $href_link"
        
        # Use the extracted href link in the next curl command
        curl -i -X GET "$href_link" -H 'Authorization: TargetToken $securityToken'
        
        #=============================================================================================================================================================
        
        #Part 4: Updating Many Devices (Mgmt API)
        # Step 1.1: Enable Gateway Token Authentication (Mgmt API)
        
        curl -i -X PUT http://localhost:8080/rest/v1/system/configs/authentication.gatewaytoken.enabled/ -u 'admin:admin' -H 'Content-Type: application/json' -d '{"value" : true}'
        
        # Step 1.2: Initialize Gateway Token (Mgmt API)
        curl -i -X PUT http://localhost:8080/rest/v1/system/configs/authentication.gatewaytoken.key/ -u 'admin:admin' -H 'Content-Type: application/json' -d '{"value": "e61c6b2b78a674d19304c357a20f1d09"}'
        
        # Step 7: Provision
         curl -i -X POST http://localhost:8080/rest/v1/targetfilters -u 'admin:admin' -H 'Content-Type: application/json' -d '{"query": "name==*", "name": "Default filter"}'
        
        
        # Step 8: add rollout
        
        curl -i -X POST http://localhost:8080/rest/v1/rollouts -u 'admin:admin' -H 'Content-Type: application/json' -d '{"distributionSetId" : 1, "targetFilterQuery" : "name==*", "name" : "MyRollout", "description" : "Global rollout of MyOS", "groups" : [{"name" : "device_01", "description" : "Devices in EMEA", "targetFilterQuery" : "name==Device*", "successCondition" : {"condition" : "THRESHOLD", "expression" : "70"}, "successAction" : {"expression" : "", "action" : "NEXTGROUP"}, "errorAction" : {"expression" : "", "action" : "PAUSE"}, "errorCondition" : {"condition" : "THRESHOLD", "expression" : "20"}}]}'
        
